// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: reader.sql

package client

import (
	"context"
	"encoding/json"
)

const getData = `-- name: GetData :one
select iri, jsonld from data where iri=$1
`

func (q *Queries) GetData(ctx context.Context, iri string) (Datum, error) {
	row := q.db.QueryRowContext(ctx, getData, iri)
	var i Datum
	err := row.Scan(&i.Iri, &i.Jsonld)
	return i, err
}

const getIdxGroupProposal = `-- name: GetIdxGroupProposal :one
select proposal from idx_group_proposal where chain_id=$1 and proposal_id=$2
`

type GetIdxGroupProposalParams struct {
	ChainID    string
	ProposalID int64
}

func (q *Queries) GetIdxGroupProposal(ctx context.Context, arg GetIdxGroupProposalParams) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, getIdxGroupProposal, arg.ChainID, arg.ProposalID)
	var proposal json.RawMessage
	err := row.Scan(&proposal)
	return proposal, err
}

const getIdxGroupProposals = `-- name: GetIdxGroupProposals :many
select proposal from idx_group_proposal where chain_id=$1
`

func (q *Queries) GetIdxGroupProposals(ctx context.Context, chainID string) ([]json.RawMessage, error) {
	rows, err := q.db.QueryContext(ctx, getIdxGroupProposals, chainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []json.RawMessage
	for rows.Next() {
		var proposal json.RawMessage
		if err := rows.Scan(&proposal); err != nil {
			return nil, err
		}
		items = append(items, proposal)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIdxProcessLastBlock = `-- name: GetIdxProcessLastBlock :one
select last_block from idx_process where chain_id=$1 and process_name=$2
`

type GetIdxProcessLastBlockParams struct {
	ChainID     string
	ProcessName string
}

func (q *Queries) GetIdxProcessLastBlock(ctx context.Context, arg GetIdxProcessLastBlockParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getIdxProcessLastBlock, arg.ChainID, arg.ProcessName)
	var last_block int64
	err := row.Scan(&last_block)
	return last_block, err
}
