services:
  db:
    build:
      context: .
      dockerfile: docker/db.Dockerfile
    entrypoint: ["/bin/sh", "-c", "./scripts/db_start.sh"]
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    network_mode: host
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 10s
      retries: 100

  fuseki:
    image: stain/jena-fuseki:jena4
    environment:
      ADMIN_PASSWORD: fuseki
      FUSEKI_DATASET_1: resources
    network_mode: host
    expose:
      - 3030
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:3030 || exit 1"]
      interval: 1s
      timeout: 10s
      retries: 100

  ipfs:
    image: ipfs/kubo
    environment:
      IPFS_PROFILE: server
    network_mode: host
    expose:
      - 8080
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080 || exit 1"]
      interval: 1s
      timeout: 10s
      retries: 100

  chora:
    build:
      context: .
      dockerfile: docker/chora.Dockerfile
    entrypoint: ["/bin/sh", "-c", "./scripts/chora_start.sh"]
    network_mode: host
    expose:
      - 1317
      - 26657
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:26657 || exit 1"]
      interval: 1s
      timeout: 10s
      retries: 100

  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    environment:
      DATABASE_URL: "postgres://postgres:password@localhost:5432/server?sslmode=disable"
    # sleep for 5 seconds to prevent error when api and idx initialize database at same time
    entrypoint: [ "/bin/sh", "-c", "sleep 5 && api" ]
    network_mode: host
    expose:
      - 3000
    depends_on:
      db:
        condition: service_healthy

  idx:
    build:
      context: .
      dockerfile: docker/idx.Dockerfile
    environment:
      DATABASE_URL: "postgres://postgres:password@localhost:5432/server?sslmode=disable"
    entrypoint: [ "/bin/sh", "-c", "idx localhost:9090 chora-local" ]
    network_mode: host
    depends_on:
      db:
        condition: service_healthy
      chora:
        condition: service_healthy

  tester:
    build:
      context: .
      dockerfile: docker/tester.Dockerfile
    entrypoint: ["/bin/sh", "-c", "./scripts/tester_start.sh"]
    network_mode: host
    depends_on:
      db:
        condition: service_healthy
      chora:
        condition: service_healthy
      idx:
        condition: service_started
